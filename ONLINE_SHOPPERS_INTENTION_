{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "#IMPORTING NECESSARY PYTHON PACKAGES\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DATA SET INFORMATION:\n",
    "\n",
    "The dataset consists of feature vectors belonging to 12,330 sessions.\n",
    "The dataset was formed so that each session\n",
    "would belong to a different user in a 1-year period to avoid\n",
    "any tendency to a specific campaign, special day, user\n",
    "profile, or period."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ATTRIBUTE INFORMATION:\n",
    "\n",
    "The dataset consists of 10 numerical and 8 categorical attributes.\n",
    "The 'Revenue' attribute can be used as the class label.\n",
    "\"Administrative\", \"Administrative Duration\", \"Informational\", \"Informational Duration\", \"Product Related\" and \"Product Related Duration\" represent the number of different types of pages visited by the visitor in that session and total time spent in each of these page categories. The values of these features are derived from the URL information of the pages visited by the user and updated in real time when a user takes an action, e.g. moving from one page to another. The \"Bounce Rate\", \"Exit Rate\" and \"Page Value\" features represent the metrics measured by \"Google Analytics\" for each page in the e-commerce site. The value of \"Bounce Rate\" feature for a web page refers to the percentage of visitors who enter the site from that page and then leave (\"bounce\") without triggering any other requests to the analytics server during that session. The value of \"Exit Rate\" feature for a specific web page is calculated as for all pageviews to the page, the percentage that were the last in the session. The \"Page Value\" feature represents the average value for a web page that a user visited before completing an e-commerce transaction. The \"Special Day\" feature indicates the closeness of the site visiting time to a specific special day (e.g. Mother’s Day, Valentine's Day) in which the sessions are more likely to be finalized with transaction. The value of this attribute is determined by considering the dynamics of e-commerce such as the duration between the order date and delivery date. For example, for Valentina’s day, this value takes a nonzero value between February 2 and February 12, zero before and after this date unless it is close to another special day, and its maximum value of 1 on February 8. The dataset also includes operating system, browser, region, traffic type, visitor type as returning or new visitor, a Boolean value indicating whether the date of the visit is weekend, and month of the year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv('online_shoppers_intention.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "#EXPLORATORY DATA ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Administrative</th>\n",
       "      <th>Administrative_Duration</th>\n",
       "      <th>Informational</th>\n",
       "      <th>Informational_Duration</th>\n",
       "      <th>ProductRelated</th>\n",
       "      <th>ProductRelated_Duration</th>\n",
       "      <th>BounceRates</th>\n",
       "      <th>ExitRates</th>\n",
       "      <th>PageValues</th>\n",
       "      <th>SpecialDay</th>\n",
       "      <th>Month</th>\n",
       "      <th>OperatingSystems</th>\n",
       "      <th>Browser</th>\n",
       "      <th>Region</th>\n",
       "      <th>TrafficType</th>\n",
       "      <th>VisitorType</th>\n",
       "      <th>Weekend</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>627.500000</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Administrative  Administrative_Duration  Informational  \\\n",
       "0             0.0                      0.0            0.0   \n",
       "1             0.0                      0.0            0.0   \n",
       "2             0.0                     -1.0            0.0   \n",
       "3             0.0                      0.0            0.0   \n",
       "4             0.0                      0.0            0.0   \n",
       "\n",
       "   Informational_Duration  ProductRelated  ProductRelated_Duration  \\\n",
       "0                     0.0             1.0                 0.000000   \n",
       "1                     0.0             2.0                64.000000   \n",
       "2                    -1.0             1.0                -1.000000   \n",
       "3                     0.0             2.0                 2.666667   \n",
       "4                     0.0            10.0               627.500000   \n",
       "\n",
       "   BounceRates  ExitRates  PageValues  SpecialDay Month  OperatingSystems  \\\n",
       "0         0.20       0.20         0.0         0.0   Feb                 1   \n",
       "1         0.00       0.10         0.0         0.0   Feb                 2   \n",
       "2         0.20       0.20         0.0         0.0   Feb                 4   \n",
       "3         0.05       0.14         0.0         0.0   Feb                 3   \n",
       "4         0.02       0.05         0.0         0.0   Feb                 3   \n",
       "\n",
       "   Browser  Region  TrafficType        VisitorType  Weekend  Revenue  \n",
       "0        1       1            1  Returning_Visitor    False    False  \n",
       "1        2       1            2  Returning_Visitor    False    False  \n",
       "2        1       9            3  Returning_Visitor    False    False  \n",
       "3        2       2            4  Returning_Visitor    False    False  \n",
       "4        3       1            4  Returning_Visitor     True    False  "
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Administrative', 'Administrative_Duration', 'Informational',\n",
       "       'Informational_Duration', 'ProductRelated', 'ProductRelated_Duration',\n",
       "       'BounceRates', 'ExitRates', 'PageValues', 'SpecialDay', 'Month',\n",
       "       'OperatingSystems', 'Browser', 'Region', 'TrafficType', 'VisitorType',\n",
       "       'Weekend', 'Revenue'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Administrative             float64\n",
       "Administrative_Duration    float64\n",
       "Informational              float64\n",
       "Informational_Duration     float64\n",
       "ProductRelated             float64\n",
       "ProductRelated_Duration    float64\n",
       "BounceRates                float64\n",
       "ExitRates                  float64\n",
       "PageValues                 float64\n",
       "SpecialDay                 float64\n",
       "Month                       object\n",
       "OperatingSystems             int64\n",
       "Browser                      int64\n",
       "Region                       int64\n",
       "TrafficType                  int64\n",
       "VisitorType                 object\n",
       "Weekend                       bool\n",
       "Revenue                       bool\n",
       "dtype: object"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 12330 entries, 0 to 12329\n",
      "Data columns (total 18 columns):\n",
      "Administrative             12316 non-null float64\n",
      "Administrative_Duration    12316 non-null float64\n",
      "Informational              12316 non-null float64\n",
      "Informational_Duration     12316 non-null float64\n",
      "ProductRelated             12316 non-null float64\n",
      "ProductRelated_Duration    12316 non-null float64\n",
      "BounceRates                12316 non-null float64\n",
      "ExitRates                  12316 non-null float64\n",
      "PageValues                 12330 non-null float64\n",
      "SpecialDay                 12330 non-null float64\n",
      "Month                      12330 non-null object\n",
      "OperatingSystems           12330 non-null int64\n",
      "Browser                    12330 non-null int64\n",
      "Region                     12330 non-null int64\n",
      "TrafficType                12330 non-null int64\n",
      "VisitorType                12330 non-null object\n",
      "Weekend                    12330 non-null bool\n",
      "Revenue                    12330 non-null bool\n",
      "dtypes: bool(2), float64(10), int64(4), object(2)\n",
      "memory usage: 1.5+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Administrative             14\n",
       "Administrative_Duration    14\n",
       "Informational              14\n",
       "Informational_Duration     14\n",
       "ProductRelated             14\n",
       "ProductRelated_Duration    14\n",
       "BounceRates                14\n",
       "ExitRates                  14\n",
       "PageValues                  0\n",
       "SpecialDay                  0\n",
       "Month                       0\n",
       "OperatingSystems            0\n",
       "Browser                     0\n",
       "Region                      0\n",
       "TrafficType                 0\n",
       "VisitorType                 0\n",
       "Weekend                     0\n",
       "Revenue                     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Only 14 values are found to be null out of 12316.since 12316 is far greater than 14 .we can drop these features for simplicity.\n",
    "data=data.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Administrative             0\n",
       "Administrative_Duration    0\n",
       "Informational              0\n",
       "Informational_Duration     0\n",
       "ProductRelated             0\n",
       "ProductRelated_Duration    0\n",
       "BounceRates                0\n",
       "ExitRates                  0\n",
       "PageValues                 0\n",
       "SpecialDay                 0\n",
       "Month                      0\n",
       "OperatingSystems           0\n",
       "Browser                    0\n",
       "Region                     0\n",
       "TrafficType                0\n",
       "VisitorType                0\n",
       "Weekend                    0\n",
       "Revenue                    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Administrative</th>\n",
       "      <th>Administrative_Duration</th>\n",
       "      <th>Informational</th>\n",
       "      <th>Informational_Duration</th>\n",
       "      <th>ProductRelated</th>\n",
       "      <th>ProductRelated_Duration</th>\n",
       "      <th>BounceRates</th>\n",
       "      <th>ExitRates</th>\n",
       "      <th>PageValues</th>\n",
       "      <th>SpecialDay</th>\n",
       "      <th>OperatingSystems</th>\n",
       "      <th>Browser</th>\n",
       "      <th>Region</th>\n",
       "      <th>TrafficType</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "      <td>12316.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.317798</td>\n",
       "      <td>80.906176</td>\n",
       "      <td>0.503979</td>\n",
       "      <td>34.506387</td>\n",
       "      <td>31.763884</td>\n",
       "      <td>1196.037057</td>\n",
       "      <td>0.022152</td>\n",
       "      <td>0.043003</td>\n",
       "      <td>5.895952</td>\n",
       "      <td>0.061497</td>\n",
       "      <td>2.124147</td>\n",
       "      <td>2.357584</td>\n",
       "      <td>3.148019</td>\n",
       "      <td>4.070477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.322754</td>\n",
       "      <td>176.860432</td>\n",
       "      <td>1.270701</td>\n",
       "      <td>140.825479</td>\n",
       "      <td>44.490339</td>\n",
       "      <td>1914.372511</td>\n",
       "      <td>0.048427</td>\n",
       "      <td>0.048527</td>\n",
       "      <td>18.577926</td>\n",
       "      <td>0.199020</td>\n",
       "      <td>0.911566</td>\n",
       "      <td>1.718028</td>\n",
       "      <td>2.402211</td>\n",
       "      <td>4.024598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>185.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.014286</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>599.766190</td>\n",
       "      <td>0.003119</td>\n",
       "      <td>0.025124</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>93.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1466.479902</td>\n",
       "      <td>0.016684</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>3398.750000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>2549.375000</td>\n",
       "      <td>705.000000</td>\n",
       "      <td>63973.522230</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>361.763742</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Administrative  Administrative_Duration  Informational  \\\n",
       "count    12316.000000             12316.000000   12316.000000   \n",
       "mean         2.317798                80.906176       0.503979   \n",
       "std          3.322754               176.860432       1.270701   \n",
       "min          0.000000                -1.000000       0.000000   \n",
       "25%          0.000000                 0.000000       0.000000   \n",
       "50%          1.000000                 8.000000       0.000000   \n",
       "75%          4.000000                93.500000       0.000000   \n",
       "max         27.000000              3398.750000      24.000000   \n",
       "\n",
       "       Informational_Duration  ProductRelated  ProductRelated_Duration  \\\n",
       "count            12316.000000    12316.000000             12316.000000   \n",
       "mean                34.506387       31.763884              1196.037057   \n",
       "std                140.825479       44.490339              1914.372511   \n",
       "min                 -1.000000        0.000000                -1.000000   \n",
       "25%                  0.000000        7.000000               185.000000   \n",
       "50%                  0.000000       18.000000               599.766190   \n",
       "75%                  0.000000       38.000000              1466.479902   \n",
       "max               2549.375000      705.000000             63973.522230   \n",
       "\n",
       "        BounceRates     ExitRates    PageValues    SpecialDay  \\\n",
       "count  12316.000000  12316.000000  12316.000000  12316.000000   \n",
       "mean       0.022152      0.043003      5.895952      0.061497   \n",
       "std        0.048427      0.048527     18.577926      0.199020   \n",
       "min        0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.014286      0.000000      0.000000   \n",
       "50%        0.003119      0.025124      0.000000      0.000000   \n",
       "75%        0.016684      0.050000      0.000000      0.000000   \n",
       "max        0.200000      0.200000    361.763742      1.000000   \n",
       "\n",
       "       OperatingSystems       Browser        Region   TrafficType  \n",
       "count      12316.000000  12316.000000  12316.000000  12316.000000  \n",
       "mean           2.124147      2.357584      3.148019      4.070477  \n",
       "std            0.911566      1.718028      2.402211      4.024598  \n",
       "min            1.000000      1.000000      1.000000      1.000000  \n",
       "25%            2.000000      2.000000      1.000000      2.000000  \n",
       "50%            2.000000      2.000000      3.000000      2.000000  \n",
       "75%            3.000000      2.000000      4.000000      4.000000  \n",
       "max            8.000000     13.000000      9.000000     20.000000  "
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DETECTING OUTLIERS IN ADMINISTRATIVE DURATION,INFORMATIONAL DURATION,PRODUCT RELATED,PRODUCT RELATED DURATION AND PAGE VALUES BECAUSE OF THE HIGH VARIANCE IN THESE FEATURES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Administrative             1.104069e+01\n",
       "Administrative_Duration    3.127961e+04\n",
       "Informational              1.614682e+00\n",
       "Informational_Duration     1.983182e+04\n",
       "ProductRelated             1.979390e+03\n",
       "ProductRelated_Duration    3.664822e+06\n",
       "BounceRates                2.345187e-03\n",
       "ExitRates                  2.354899e-03\n",
       "PageValues                 3.451393e+02\n",
       "SpecialDay                 3.960877e-02\n",
       "OperatingSystems           8.309524e-01\n",
       "Browser                    2.951620e+00\n",
       "Region                     5.770618e+00\n",
       "TrafficType                1.619739e+01\n",
       "Weekend                    1.785247e-01\n",
       "Revenue                    1.309307e-01\n",
       "dtype: float64"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\parameshwari\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:190: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self._setitem_with_indexer(indexer, value)\n"
     ]
    }
   ],
   "source": [
    "from scipy import stats\n",
    "import numpy as np\n",
    "z = np.abs(stats.zscore(data.Administrative_Duration))\n",
    "threshold = 3\n",
    "a=np.where(z > 3)\n",
    "for i in a[0]:\n",
    "    data.Administrative_Duration.iloc[i]=81"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats\n",
    "import numpy as np\n",
    "z_score = np.abs(stats.zscore(data.ProductRelated_Duration))\n",
    "threshold = 3\n",
    "a_product=np.where(z_score > 3)\n",
    "for i in a_product[0]:\n",
    "    data.ProductRelated_Duration.iloc[i]=1196.037057"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats\n",
    "import numpy as np\n",
    "z_score_Informational_Duration = np.abs(stats.zscore(data.Informational_Duration))\n",
    "threshold = 3\n",
    "a_product_Informational_Duration=np.where(z_score_Informational_Duration > 3)\n",
    "for i in a_product_Informational_Duration[0]:\n",
    "    data.Informational_Duration.iloc[i]=34.506387"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.ProductRelated_Duration=np.cbrt(data.ProductRelated_Duration)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.Informational_Duration=np.cbrt(data.Informational_Duration)\n",
    "data.Administrative_Duration=np.cbrt(data.Administrative_Duration)\n",
    "data.ProductRelated =np.cbrt(data.ProductRelated )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Administrative              11.040693\n",
       "Administrative_Duration      6.196876\n",
       "Informational                1.614682\n",
       "Informational_Duration       3.053810\n",
       "ProductRelated               1.243900\n",
       "ProductRelated_Duration     16.976926\n",
       "BounceRates                  0.002345\n",
       "ExitRates                    0.002355\n",
       "PageValues                 345.139327\n",
       "SpecialDay                   0.039609\n",
       "Month                        5.624146\n",
       "VisitorType                  0.477600\n",
       "Weekend                      0.178525\n",
       "Revenue                      0.130931\n",
       "dtype: float64"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    10537\n",
       "0     1694\n",
       "1       85\n",
       "Name: VisitorType, dtype: int64"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.VisitorType.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.Columns Operating System,Region,Browser and Traffic type is independent of the person purchasing a product online.Therefore we remove these columns for simplicity.\n",
    "\n",
    "2.Since weekend and Revenue columns are Boolean we are converting these columns to 0 and 1's.\n",
    "\n",
    "3.Visitor type is observed to have 3 different categorical values.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['OperatingSystems' 'Browser' 'Region' 'TrafficType'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-201-70bcece84c80>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'OperatingSystems'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'Browser'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'Region'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'TrafficType'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[0;32m   3938\u001b[0m                                            \u001b[0mindex\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3939\u001b[0m                                            \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3940\u001b[1;33m                                            errors=errors)\n\u001b[0m\u001b[0;32m   3941\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3942\u001b[0m     @rewrite_axis_style_signature('mapper', [('copy', True),\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[0;32m   3778\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[1;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3779\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3780\u001b[1;33m                 \u001b[0mobj\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3781\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3782\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[1;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[0;32m   3810\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3811\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3812\u001b[1;33m                 \u001b[0mnew_axis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3813\u001b[0m             \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3814\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, errors)\u001b[0m\n\u001b[0;32m   4963\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[1;34m'ignore'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4964\u001b[0m                 raise KeyError(\n\u001b[1;32m-> 4965\u001b[1;33m                     '{} not found in axis'.format(labels[mask]))\n\u001b[0m\u001b[0;32m   4966\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4967\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: \"['OperatingSystems' 'Browser' 'Region' 'TrafficType'] not found in axis\""
     ]
    }
   ],
   "source": [
    "data=data.drop(['OperatingSystems','Browser','Region','TrafficType'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Administrative', 'Administrative_Duration', 'Informational',\n",
       "       'Informational_Duration', 'ProductRelated', 'ProductRelated_Duration',\n",
       "       'BounceRates', 'ExitRates', 'PageValues', 'SpecialDay', 'Month',\n",
       "       'VisitorType', 'Weekend', 'Revenue'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "le=LabelEncoder()\n",
    "data['VisitorType']=le.fit_transform(data['VisitorType'])\n",
    "data['Month']=le.fit_transform(data['Month'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Revenue']=data['Revenue'].replace(True,1)\n",
    "data['Revenue']=data['Revenue'].replace(False,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Weekend']=data['Weekend'].replace(True,1)\n",
    "data['Weekend']=data['Weekend'].replace(False,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Administrative</th>\n",
       "      <th>Administrative_Duration</th>\n",
       "      <th>Informational</th>\n",
       "      <th>Informational_Duration</th>\n",
       "      <th>ProductRelated</th>\n",
       "      <th>ProductRelated_Duration</th>\n",
       "      <th>BounceRates</th>\n",
       "      <th>ExitRates</th>\n",
       "      <th>PageValues</th>\n",
       "      <th>SpecialDay</th>\n",
       "      <th>Month</th>\n",
       "      <th>VisitorType</th>\n",
       "      <th>Weekend</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.259921</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.259921</td>\n",
       "      <td>1.386723</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.154435</td>\n",
       "      <td>8.561264</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Administrative  Administrative_Duration  Informational  \\\n",
       "0             0.0                      0.0            0.0   \n",
       "1             0.0                      0.0            0.0   \n",
       "2             0.0                     -1.0            0.0   \n",
       "3             0.0                      0.0            0.0   \n",
       "4             0.0                      0.0            0.0   \n",
       "\n",
       "   Informational_Duration  ProductRelated  ProductRelated_Duration  \\\n",
       "0                     0.0        1.000000                 0.000000   \n",
       "1                     0.0        1.259921                 4.000000   \n",
       "2                    -1.0        1.000000                -1.000000   \n",
       "3                     0.0        1.259921                 1.386723   \n",
       "4                     0.0        2.154435                 8.561264   \n",
       "\n",
       "   BounceRates  ExitRates  PageValues  SpecialDay  Month  VisitorType  \\\n",
       "0         0.20       0.20         0.0         0.0      2            2   \n",
       "1         0.00       0.10         0.0         0.0      2            2   \n",
       "2         0.20       0.20         0.0         0.0      2            2   \n",
       "3         0.05       0.14         0.0         0.0      2            2   \n",
       "4         0.02       0.05         0.0         0.0      2            2   \n",
       "\n",
       "   Weekend  Revenue  \n",
       "0      0.0      0.0  \n",
       "1      0.0      0.0  \n",
       "2      0.0      0.0  \n",
       "3      0.0      0.0  \n",
       "4      1.0      0.0  "
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x000002BB950C13C8>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB951BD160>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB951EB550>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB95218B00>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000002BB952520F0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB9527F588>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB952B0B38>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB952E9160>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000002BB952E9198>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB96AA4C50>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB96AE2240>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB96B06D68>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000002BB96B36358>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB96B68908>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB96B9CEB8>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002BB96BDA4A8>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x2160 with 16 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.hist(figsize=(20,30))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the histogram we can observe the distribution of the data.Columns Administrative,Exit rates,Bounce Rates posess left skewed distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2bb96d42080>"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data.Revenue)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "one indicates the purchase of a product online and zero indicates the exact opposite of it.This clearly tell us that the data is imbalanced.Number of Zeros are far greater than the number of ones.Running the Knn model on this data produces biased results for the majority level that is zero.In order to eliminate this Undersampling of the majority class is done ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2bb96c3fe48>"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data.corr())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from the above heatmap of correlaton between the features of the dataset.It is evident that page values and Revenue are positively correlated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1908\n"
     ]
    }
   ],
   "source": [
    "minority_len=len(data[data['Revenue']==1])\n",
    "print(minority_len)\n",
    "majority_indices=data[data['Revenue']==0].index\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "random_majority_indice=np.random.choice(majority_indices,minority_len,replace=False)\n",
    "minority_class_indices=data[data['Revenue']==1].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2bb96e3dfd0>"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "under_sample_indices=np.concatenate([minority_class_indices,random_majority_indice])\n",
    "data1=data.loc[under_sample_indices]\n",
    "sns.countplot(x='Revenue',data=data1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data1.loc[:,data.columns!='Revenue']\n",
    "y=data1.loc[:,data.columns=='Revenue']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scalar=StandardScaler()\n",
    "X_train=scalar.fit_transform(X_train)\n",
    "X_test=scalar.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\parameshwari\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn=KNeighborsClassifier()\n",
    "knn.fit(X_train,y_train)\n",
    "predictions=knn.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8217895919131412"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.score(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7519650655021834"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.73      0.78      0.76       569\n",
      "         1.0       0.77      0.72      0.75       576\n",
      "\n",
      "    accuracy                           0.75      1145\n",
      "   macro avg       0.75      0.75      0.75      1145\n",
      "weighted avg       0.75      0.75      0.75      1145\n",
      "\n",
      "[[446 123]\n",
      " [161 415]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report,confusion_matrix\n",
    "print(classification_report(y_test,predictions))\n",
    "print(confusion_matrix(y_test,predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\parameshwari\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:73: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(**kwargs)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "model1=LogisticRegression()\n",
    "model1.fit(X_train,y_train)\n",
    "pred=model1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8146761512542119"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1.score(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8096069868995633"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
